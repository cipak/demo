{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","token","setToken","destination","setDestination","widget","setWidget","theme","setTheme","ref","useRef","className","type","value","onChange","event","target","onClick","document","fullscreenElement","exitFullscreen","current","requestFullscreen","window","webexSDKAdapterSetLogLevel","accessToken","meetingDestination","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2nBA8DeA,MAzDf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA4BJ,oBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAA0BN,mBAAS,QAAnC,mBAAOO,EAAP,KAAcC,EAAd,KACMC,EAAMC,mBAgBZ,OACE,sBAAKC,UAAU,MAAf,UACE,qDACA,wBAAOA,UAAU,QAAjB,UACE,0CACA,uBAAOC,KAAK,OAAOC,MAAOZ,EAAOa,SAAU,SAACC,GAAD,OAAWb,EAASa,EAAMC,OAAOH,aAE9E,wBAAOF,UAAU,QAAjB,UACE,iDACA,uBAAOC,KAAK,OAAOC,MAAOV,EAAaW,SAAU,SAACC,GAAD,OAAWX,EAAeW,EAAMC,OAAOH,aAE1F,wBAAOF,UAAU,QAAjB,UACE,0CACA,yBAAQE,MAAON,EAAOO,SAAU,SAACC,GAAD,OAAWP,EAASO,EAAMC,OAAOH,QAAjE,UACE,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,QAAd,yBAGJ,wBAAOF,UAAU,QAAjB,UACE,wBAAQC,KAAK,SAASK,QAAS,kBAAMX,GAAU,IAA/C,iCACA,wBAAQM,KAAK,SAASK,QAAS,kBAAMX,GAAU,IAA/C,mCACA,wBAAQM,KAAK,SAASK,QAnCT,WACZC,SAASC,kBAGRD,SAASE,gBACXF,SAASE,iBAHXX,EAAIY,QAAQC,qBAiCV,wBACA,wBAAQV,KAAK,SAASK,QA1BV,WAChBM,OAAOC,2BAA2B,UAyB9B,oCAGDnB,GAAU,qBAAKM,UAAS,qCAAgCJ,GAASE,IAAKA,EAA5D,SACT,cAAC,IAAD,CACEE,UAAU,aACVc,YAAaxB,EACbyB,mBAAoBvB,UC3CfwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASqB,eAAe,SAM1BZ,K","file":"static/js/main.d0f40f21.chunk.js","sourcesContent":["import {useState, useRef} from 'react';\nimport {WebexMeetingWidget} from '@webex/widgets';\nimport '@webex/widgets/dist/webexWidgets.css';\nimport './App.css';\n\nfunction App() {\n  const [token, setToken] = useState('');\n  const [destination, setDestination] = useState('');\n  const [widget, setWidget] = useState(false);\n  const [theme, setTheme] = useState('dark');\n  const ref = useRef();\n\n  const fullscreen = () => {\n    if (!document.fullscreenElement) {\n      ref.current.requestFullscreen();\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    }\n  };\n\n  const startLogs = () => {\n    window.webexSDKAdapterSetLogLevel('debug');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Meeting Widget Demo</h1>\n      <label className=\"label\">\n        <span>Token:</span>\n        <input type=\"text\" value={token} onChange={(event) => setToken(event.target.value)} />\n      </label>\n      <label className=\"label\">\n        <span>Destination: </span>\n        <input type=\"text\" value={destination} onChange={(event) => setDestination(event.target.value)} />\n      </label>\n      <label className=\"label\">\n        <span>Theme:</span>\n        <select value={theme} onChange={(event) => setTheme(event.target.value)}>\n          <option value=\"dark\">Dark</option>\n          <option value=\"light\">Light</option>\n        </select>\n      </label>\n      <label className=\"label\">\n        <button type=\"button\" onClick={() => setWidget(true)}>Load meeting widget</button>\n        <button type=\"button\" onClick={() => setWidget(false)}>Remove meeting widget</button>\n        <button type=\"button\" onClick={fullscreen}>Fullscreen</button>\n        <button type=\"button\" onClick={startLogs}>Activate debug logs</button>\n      </label>\n\n      {widget && <div className={`widget-container wxc-theme-${theme}`} ref={ref}>\n        <WebexMeetingWidget\n          className=\"the-widget\"\n          accessToken={token}\n          meetingDestination={destination}\n        />\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}