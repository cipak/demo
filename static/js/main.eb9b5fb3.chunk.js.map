{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["LAYOUT_TYPES","DEFAULT_THEME","DEFAULT_LAYOUT","useLocalStorage","item","defval","useState","value","localStorage","getItem","stateValue","setStateValue","useCallback","setItem","App","token","setToken","destination","setDestination","widget","setWidget","theme","setTheme","layout","setLayout","ref","useRef","className","type","onChange","event","target","map","onClick","document","fullscreenElement","exitFullscreen","current","requestFullscreen","window","webexSDKAdapterSetLogLevel","accessToken","meetingDestination","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2nBAKMA,EAAe,CAAC,UAAW,OAAQ,QAAS,YAAa,SACzDC,EAAgB,OAChBC,EAAiB,OAEjBC,EAAkB,SAACC,EAAMC,GAC7B,MAAoCC,oBAAS,WAC3C,IAAMC,EAAQC,aAAaC,QAAQL,GACnC,OAAiB,OAAVG,EAAiBA,EAAQF,KAFlC,mBAAOK,EAAP,KAAmBC,EAAnB,KASA,MAAO,CAACD,EALSE,uBAAY,SAACL,GAC5BI,EAAcJ,GACdC,aAAaK,QAAQT,EAAMG,KAC1B,CAACH,MAgFSU,MA3Ef,WACE,MAA0BX,EAAgB,oBAAqB,IAA/D,mBAAOY,EAAP,KAAcC,EAAd,KACA,EAAsCb,EAAgB,2BAA4B,IAAlF,mBAAOc,EAAP,KAAoBC,EAApB,KACA,EAA4BZ,oBAAS,GAArC,mBAAOa,EAAP,KAAeC,EAAf,KACA,EAA0BjB,EAAgB,aAAcF,GAAxD,mBAAOoB,EAAP,KAAcC,EAAd,KACA,EAA4BnB,EAAgB,cAAeD,GAA3D,mBAAOqB,EAAP,KAAeC,EAAf,KACMC,EAAMC,mBAuBZ,OACE,sBAAKC,UAAU,MAAf,UACE,qDACA,wBAAOA,UAAU,QAAjB,UACE,0CACA,uBAAOC,KAAK,OAAOrB,MAAOQ,EAAOc,SAAU,SAACC,GAAD,OAAWd,EAASc,EAAMC,OAAOxB,aAE9E,wBAAOoB,UAAU,QAAjB,UACE,iDACA,uBAAOC,KAAK,OAAOrB,MAAOU,EAAaY,SAAU,SAACC,GAAD,OAAWZ,EAAeY,EAAMC,OAAOxB,aAE1F,wBAAOoB,UAAU,QAAjB,UACE,0CACA,yBAAQpB,MAAOc,EAAOQ,SAAU,SAACC,GAAD,OAAWR,EAASQ,EAAMC,OAAOxB,QAAjE,UACE,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,QAAd,sBAEF,sBAAMoB,UAAU,OAAhB,uBAEF,wBAAOA,UAAU,QAAjB,UACE,2CACA,wBAAQpB,MAAOgB,EAAQM,SAAU,SAACC,GAAD,OAAWN,EAAUM,EAAMC,OAAOxB,QAAnE,SACGP,EAAagC,KAAI,SAACT,GAAD,OAAY,wBAAqBhB,MAAOgB,EAA5B,SAAqCA,GAAxBA,QAE7C,sBAAMI,UAAU,OAAhB,uBAEF,wBAAOA,UAAU,QAAjB,UACE,wBAAQC,KAAK,SAASK,QAAS,kBAAMb,GAAU,IAA/C,iCACA,wBAAQQ,KAAK,SAASK,QAAS,kBAAMb,GAAU,IAA/C,mCACA,wBAAQQ,KAAK,SAASK,QAlDT,WACZC,SAASC,kBAGRD,SAASE,gBACXF,SAASE,iBAHXX,EAAIY,QAAQC,qBAgDV,wBACA,wBAAQV,KAAK,SAASK,QAzCV,WAChBM,OAAOC,2BAA2B,UAwC9B,iCACA,wBAAQZ,KAAK,SAASK,QAtCV,WAChBjB,EAAS,IACTE,EAAe,IACfI,EAASrB,GACTuB,EAAUtB,IAkCN,2BAGDiB,GAAU,qBAAKQ,UAAS,qCAAgCN,GAASI,IAAKA,EAA5D,SACT,cAAC,IAAD,CACEE,UAAU,aACVc,YAAa1B,EACb2B,mBAAoBzB,EACpBM,OAAQA,UC9EHoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASqB,eAAe,SAM1BZ,K","file":"static/js/main.eb9b5fb3.chunk.js","sourcesContent":["import {useState, useRef, useCallback} from 'react';\nimport {WebexMeetingsWidget} from '@webex/widgets';\nimport '@webex/widgets/dist/webexWidgets.css';\nimport './App.css';\n\nconst LAYOUT_TYPES = ['Overlay', 'Grid', 'Stack', 'Prominent', 'Focus'];\nconst DEFAULT_THEME = 'dark';\nconst DEFAULT_LAYOUT = 'Grid';\n\nconst useLocalStorage = (item, defval) => {\n  const [stateValue, setStateValue] = useState(() => {\n    const value = localStorage.getItem(item);\n    return value !== null ? value : defval;\n  });\n  const setValue = useCallback((value) => {\n    setStateValue(value);\n    localStorage.setItem(item, value);\n  }, [item]);\n\n  return [stateValue, setValue];\n};\n\nfunction App() {\n  const [token, setToken] = useLocalStorage('demo:access-token', '');\n  const [destination, setDestination] = useLocalStorage('demo:meeting-destination', '');\n  const [widget, setWidget] = useState(false);\n  const [theme, setTheme] = useLocalStorage('demo:theme', DEFAULT_THEME);\n  const [layout, setLayout] = useLocalStorage('demo:layout', DEFAULT_LAYOUT);\n  const ref = useRef();\n\n  const fullscreen = () => {\n    if (!document.fullscreenElement) {\n      ref.current.requestFullscreen();\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    }\n  };\n\n  const startLogs = () => {\n    window.webexSDKAdapterSetLogLevel('debug');\n  };\n\n  const clearForm = () => {\n    setToken('');\n    setDestination('');\n    setTheme(DEFAULT_THEME);\n    setLayout(DEFAULT_LAYOUT);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Meeting Widget Demo</h1>\n      <label className=\"label\">\n        <span>Token:</span>\n        <input type=\"text\" value={token} onChange={(event) => setToken(event.target.value)} />\n      </label>\n      <label className=\"label\">\n        <span>Destination: </span>\n        <input type=\"text\" value={destination} onChange={(event) => setDestination(event.target.value)} />\n      </label>\n      <label className=\"label\">\n        <span>Theme:</span>\n        <select value={theme} onChange={(event) => setTheme(event.target.value)}>\n          <option value=\"dark\">Dark</option>\n          <option value=\"light\">Light</option>\n        </select>\n        <span className=\"live\">(live)</span>\n      </label>\n      <label className=\"label\">\n        <span>Layout:</span>\n        <select value={layout} onChange={(event) => setLayout(event.target.value)}>\n          {LAYOUT_TYPES.map((layout) => <option key={layout} value={layout}>{layout}</option>)}\n        </select>\n        <span className=\"live\">(live)</span>\n      </label>\n      <label className=\"label\">\n        <button type=\"button\" onClick={() => setWidget(true)}>Load meeting widget</button>\n        <button type=\"button\" onClick={() => setWidget(false)}>Remove meeting widget</button>\n        <button type=\"button\" onClick={fullscreen}>Fullscreen</button>\n        <button type=\"button\" onClick={startLogs}>Activate debug logs</button>\n        <button type=\"button\" onClick={clearForm}>Clear form</button>\n      </label>\n\n      {widget && <div className={`widget-container wxc-theme-${theme}`} ref={ref}>\n        <WebexMeetingsWidget\n          className=\"the-widget\"\n          accessToken={token}\n          meetingDestination={destination}\n          layout={layout}\n        />\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}